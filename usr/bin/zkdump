#!/usr/bin/python
import sys
import zookeeper
import tempfile
import base64
from simplejson import dumps, loads
from optparse import OptionParser

def world_permission(perms=zookeeper.PERM_READ):
    return dict(perms=perms, scheme='world', id='anyone')

OPEN_ACL_UNSAFE = [world_permission(zookeeper.PERM_ALL)]
READ_ACL_UNSAFE = [world_permission()]

def confirm_destructive_action(question):
    prompt = "\n[type confirm to proceed, any other key to cancel] "

    sys.stdout.write(question + prompt)
    #choice = raw_input().lower()
    choice = "confirm"
    return choice == "confirm"

def get_zookeeper(options, args):
  zk = None

  # Try connect to Zookeeper
  try:
    watch_session = None
    zk = zookeeper.init(options.zklocation, watch_session)
  except Exception, e:
    print e

  if zk is None:
    print "Failed to connect to Zookeeper at %s" % (options.zklocation)
    sys.exit(1)
  else:
    print "Connected to Zookeeper at %s" % (options.zklocation)

  return zk

def delete_zk_subtree(zk, path):
  children = zookeeper.get_children(zk, path)

  # delete children, if any
  subpath = path + "/" if path[-1] != "/" else path
  for childname in children:
    delete_zk_subtree(zk, subpath + childname)

  # finally delete self
  zookeeper.delete(zk, path)

def empty_zk(zk):
  children = zookeeper.get_children(zk, "/")

  for child_name in children:
    if child_name != "zookeeper":
      delete_zk_subtree(zk, "/" + child_name)

def import_zk(zk, filename):
  def import_zk_subtree(tree, path_so_far=""):
    name = tree["name"]
    path = "".join([path_so_far, name])

    data = ""
    if len(tree["data"]) > 0:
      data = base64.b64decode(tree["data"])

    # create self first
    if len(path) > 0:
      zookeeper.create(zk, path, data, OPEN_ACL_UNSAFE)

    for child in tree["children"]:
      import_zk_subtree(child, path + "/")

  f = open(filename,"r")

  current_contents = ", ".join(zookeeper.get_children(zk, "/"))
  go_ahead = confirm_destructive_action("Zookeeper currently contains data, with these root nodes: %s\nAre you sure you want to load file contents into Zookeeper? " % current_contents)

  if go_ahead:
    # Backup existing data just in case
    tf = tempfile.NamedTemporaryFile(delete=False)
    print "Exporting existing Zookeeper data to %s as backup" % (tf.name)
    export_zk(zk, tf.name)
    print "Backup complete (stored at %s)" % (tf.name)

    # Delete existing data
    print "Deleting existing Zookeeper data"
    empty_zk(zk)
    print "Deletion complete"

    # Load data
    print "Loading data..."
    contents = loads(f.read())
    import_zk_subtree(contents)
    print "Load complete."
  else:
    print "Load cancelled."
  f.close()

def export_zk(zk, filename):
  def export_zk_subtree(path):
    data, meta = zookeeper.get(zk, path)

    if meta["dataLength"] == 0:
      data = ""

    name = path.rsplit('/', 1)[1]

    children = zookeeper.get_children(zk, path)
    path = path + "/" if path[-1] != "/" else path

    child_paths = [path + childname for childname in children]

    child_trees = [export_zk_subtree(childpath) for childpath
                    in child_paths if childpath != "/zookeeper"]
    return {"path": path,
            "name": name,
            "data": base64.b64encode(data),
            "metadata": meta,
            "children": child_trees}

  g = open(filename,"w")

  tree = export_zk_subtree("/")
  treestr = dumps(tree, ensure_ascii=False)
  g.write(treestr)
  g.close()
  print "Successfully dumped to %s" % (filename)

if __name__ == "__main__":
    parser = OptionParser()

    parser.add_option("-z", "--zklocation", action="store", type="string", dest="zklocation",
                      help="Location of zookeeper server in server:port format, e.g. localhost:2181")

    parser.add_option("-d", "--dump", action="store_true", dest="dumpmode", default=False,
                                                          help="Dump from zookeeper")
    parser.add_option("-o", "--outfile", action="store", type="string", dest="outfile",
                      help="Path of the file to write to when dumping data from zookeeper (when using -l option)")
    parser.add_option("-l", "--load", action="store_true", dest="loadmode", default=False,
                                                          help="Load into zookeeper")
    parser.add_option("-i", "--infile", action="store", type="string", dest="infile",
                      help="Path of the file to read from when loading data into zookeeper (when using -l option)")

    (options, args) = parser.parse_args()

    if options.zklocation is None:
      print "Zookeeper location not specified."
      parser.print_help()
      sys.exit(1)

    zk = get_zookeeper(options, args)

    # Check we have a valid mode
    if options.dumpmode and options.outfile is not None and len(options.outfile) > 0:
      export_zk(zk, options.outfile)
    elif options.loadmode and options.infile is not None and len(options.infile) > 0:
      import_zk(zk, options.infile)
    else:
      print "Please run either in dump mode (-d) with an outfile specified (-o) or in load mode (-l) with an infile specified (-i)."
      parser.print_help()
      sys.exit(1)
