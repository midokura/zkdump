#!/usr/bin/python
import sys
import zookeeper
import tempfile
import base64
from simplejson import dumps, loads
from optparse import OptionParser

def world_permission(perms=zookeeper.PERM_READ):
    return dict(perms=perms, scheme='world', id='anyone')

OPEN_ACL_UNSAFE = [world_permission(zookeeper.PERM_ALL)]
READ_ACL_UNSAFE = [world_permission()]

CANCEL = -1
RESTORE_MODE = 1
DEBUG_MODE = 2

def choose_restore_mode(question):
    prompt = """
1. If you wish to restore from a backup (default), type: restore
2. If you wish to import full contents (including ephemeral nodes) for debug purposes, type: debug
3. If you wish to cancel / exit, type any other key.
"""
    sys.stdout.write(question + prompt)
    choice = raw_input().lower()

    if choice == "restore":
      return RESTORE_MODE
    elif choice == "debug":
      return DEBUG_MODE
    else:
      return CANCEL

def get_zookeeper(options, args):
  zk = None

  # Try connect to Zookeeper
  try:
    watch_session = None
    zookeeper.set_debug_level(zookeeper.LOG_LEVEL_ERROR)
    zk = zookeeper.init(options.zklocation, watch_session)
  except Exception, e:
    print e

  if zk is None:
    print "Failed to connect to Zookeeper at %s" % (options.zklocation)
    sys.exit(1)
  else:
    print "Connected to Zookeeper at %s" % (options.zklocation)

  return zk

def delete_zk_subtree(zk, path):
  children = zookeeper.get_children(zk, path)

  # delete children, if any
  subpath = path + "/" if path[-1] != "/" else path
  for childname in children:
    delete_zk_subtree(zk, subpath + childname)

  # finally delete self
  zookeeper.delete(zk, path)

def empty_zk(zk):
  children = zookeeper.get_children(zk, "/")

  for child_name in children:
    if child_name != "zookeeper":
      delete_zk_subtree(zk, "/" + child_name)

def import_zk(zk, filename):
  def import_zk_subtree(tree, load_mode, path_so_far=""):

    name = tree["name"]
    path = "".join([path_so_far, name])

    # Only load permanent nodes unless we're in debug mode
    isPermanentNode = tree["metadata"]["ephemeralOwner"] == 0
    if isPermanentNode or load_mode == DEBUG_MODE:
      # create self first
      data = ""
      if len(tree["data"]) > 0:
        data = base64.b64decode(tree["data"])

      if len(path) > 0:
        zookeeper.create(zk, path, data, OPEN_ACL_UNSAFE)

      for child in tree["children"]:
        import_zk_subtree(child, load_mode, path + "/")

  f = open(filename,"r")

  current_contents = ", ".join(zookeeper.get_children(zk, "/"))
  load_mode = choose_restore_mode("""*********************************************************************
WARNING: Zookeeper currently contains data, with these root nodes:
  %s
This data will be deleted, and file contents will be loaded into
Zookeeper instead.
*********************************************************************
Are you sure you wish to proceed? """ % current_contents)

  go_ahead = load_mode != CANCEL

  if go_ahead:
    # Backup existing data just in case
    tf = tempfile.NamedTemporaryFile(delete=False)
    print "Exporting existing Zookeeper data to %s as backup" % (tf.name)
    export_zk(zk, tf.name)
    print "Backup complete (stored at %s)" % (tf.name)

    # Delete existing data
    print "Deleting existing Zookeeper data"
    empty_zk(zk)
    print "Deletion complete"

    # Load data
    print "Loading data..."
    contents = loads(f.read())
    import_zk_subtree(contents, load_mode)
    print "Load complete."
  else:
    print "Load cancelled."
  f.close()

buf = ""
def traverse(node, level=0):
    global buf
    path = node['path']
    name = node['name']
    data = node['data']
    children = node['children']
    buf +=  '   ' * level + name + (
        '/' + base64.b64decode(data) if data else "") + '\n'
    level += 1
    for c in children:
        traverse(c, level)

def export_zk(zk, filename, pretty=None):
  def export_zk_subtree(path):
    data = None
    meta = None

    try:
      data, meta = zookeeper.get(zk, path)
    except zookeeper.NoNodeException:
      # For fast-changing entries, e.g. ARP, this could happen
      return None

    if meta["dataLength"] == 0:
      data = ""

    name = path.rsplit('/', 1)[1]

    children = []
    try:
      children = zookeeper.get_children(zk, path)
    except zookeeper.NoNodeException:
      # For fast-changing entries, e.g. ARP, this could happen
      pass

    path = path + "/" if path[-1] != "/" else path

    child_paths = filter(lambda x: x != "/zookeeper", [path + childname for childname in children])

    child_trees = filter(lambda x: x is not None, [export_zk_subtree(childpath) for childpath in child_paths])

    return {"path": path,
            "name": name,
            "data": base64.b64encode(data),
            "metadata": meta,
            "children": child_trees}

  tree = export_zk_subtree("/")
  if pretty:
    traverse(tree)
    treestr = buf
  else:
    treestr = dumps(tree, ensure_ascii=False)

  if filename:
    g = open(filename,"w")
    g.write(treestr)
    g.close()
    print "Successfully dumped to %s" % (filename)
  else:
    print treestr


if __name__ == "__main__":
    parser = OptionParser()

    parser.add_option("-z", "--zklocation", action="store", type="string", dest="zklocation",
                      help="Location of zookeeper server in server:port format, e.g. localhost:2181")
    parser.add_option("-d", "--dump", action="store_true", dest="dumpmode",
                      default=False,
                      help="Dump from zookeeper to a file or standard output without -o option.")
    parser.add_option("-o", "--outfile", action="store", type="string", dest="outfile",
                      help="Path of the file to write to when dumping data from zookeeper (when using -l option)")
    parser.add_option("-p", "--pretty", action="store_true", dest="pretty",
                      default=False,
                      help="Pretty print with tree structure. "
                           "CAUTION: PRETTY PRINTED DATA CANNOT BE LOADED BACK")
    parser.add_option("-l", "--load", action="store_true", dest="loadmode", default=False,
                                                          help="Load into zookeeper")
    parser.add_option("-i", "--infile", action="store", type="string", dest="infile",
                      help="Path of the file to read from when loading data into zookeeper (when using -l option)")

    (options, args) = parser.parse_args()

    if options.zklocation is None:
      print "Zookeeper location not specified."
      parser.print_help()
      sys.exit(1)

    zk = get_zookeeper(options, args)

    # Check we have a valid mode
    if options.dumpmode:
        export_zk(zk, options.outfile, options.pretty)
    elif options.loadmode and options.infile is not None and len(options.infile) > 0:
      import_zk(zk, options.infile)
    else:
      print "Please run either in dump mode (-d) with an outfile specified (-o) or in load mode (-l) with an infile specified (-i)."
      parser.print_help()
      sys.exit(1)
